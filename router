import time
from typing import List
from datetime import datetime, timedelta
from fastapi import APIRouter, Depends, Request, HTTPException
import uuid

from starlette.responses import JSONResponse

from deps import deps
from db.model import query_set_to_dict
from schemas import api
from financial import Resourcecrud, amountcrud
from financial import accountcrud
from fastapi.encoders import jsonable_encoder
from fastapi.responses import PlainTextResponse
from response import R

router = APIRouter()


@router.post("/resource/add")
def save_api(request: Request, apiSchema: api.ResourceAdd, session=Depends(deps.get_session)):
    AG = request.headers.get('token')
    return Resourcecrud.api.save_resource(obj_in=apiSchema, db=session)


@router.post("/resource/delete")
def delete(apiSchema: api.ResourceDelete, session=Depends(deps.get_session)):
    check_result = Resourcecrud.api.check_by_id(Id=apiSchema.id, db=session)
    if check_result is not None:
        Resourcecrud.api.delete(Id=apiSchema.id, db=session)
        return R.ok()
    else:
        return R.fai(message="resource not found")


@router.post("/financial/add")
def save_financial(apiSchema: api.FinancialAdd, session=Depends(deps.get_session)):
    apiSchema.token = "123456789"
    apiSchema.create_dt = datetime.now()
    return accountcrud.api.save_financial(obj_in=apiSchema, db=session)


@router.post("/financial/account")
def save_financial(apiSchema: api.AmountAdd, session=Depends(deps.get_session)):
    if apiSchema.state == 0:
        count = str(apiSchema.amount)
        apiSchema.log_content = "收入" + count
    else:
        count = str(apiSchema.amount)
        apiSchema.log_content = "支出" + count
    apiSchema.oper_dt = datetime.now()
    return amountcrud.api.save_amount(obj_in=apiSchema, db=session)


@router.post("/financial/total")
def query_total(apiSchema: api.ResourceDelete, session=Depends(deps.get_session)):
    num = accountcrud.api.check_byId(Id=apiSchema.id, db=session)
    if num == 0:
        return R.fai(message='can not found')
    else:
        summ = amountcrud.api.query_total(Id=apiSchema.id, db=session)
        return R.ok(message="资金总额", data=float(summ))


@router.post("/financial/accountbook")
def query_page(apiSchema: api.pageRequest, session=Depends(deps.get_session)):
    num = accountcrud.api.check_byId(Id=apiSchema.id, db=session)
    if num == 0:
        return R.fai(message='can not found')
    else:
        return amountcrud.api.query_amount(ID=apiSchema.id, pn=apiSchema.pn, pg=apiSchema.pg, db=session)
